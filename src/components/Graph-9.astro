---
import { readFile } from "node:fs/promises";
import * as d3 from "d3";
const baseCulturelleText = await readFile(
  "./src/assets/base_culturelle_nettoyee.csv",
  "utf-8"
);
let patrimoine = d3.dsvFormat(";").parse(baseCulturelleText);
if (Object.keys(patrimoine[0]).length === 1) {
  patrimoine = d3.dsvFormat(",").parse(baseCulturelleText);
}
const festivalsText = await readFile(
  "./src/assets/festivals-global-festivals-pl.csv",
  "utf-8"
);
const festivalsData = d3.dsvFormat(";").parse(festivalsText);
const keyType =
  Object.keys(patrimoine[0]).find((k) => k.toLowerCase().includes("type")) ??
  "Type équipement ou lieu";
const keyRegion =
  Object.keys(patrimoine[0]).find((k) => k.toLowerCase().includes("région")) ??
  "Région";
const monuments = patrimoine.filter(
  (d) => d[keyType]?.trim() === "Monument" && d[keyRegion]
);
const monumentsParRegion = d3.rollup(
  monuments,
  (v) => v.length,
  (d) => d[keyRegion]?.trim() ?? ""
);

const depToRegion = new Map([
  ["01", "Auvergne-Rhône-Alpes"],
  ["03", "Auvergne-Rhône-Alpes"],
  ["07", "Auvergne-Rhône-Alpes"],
  ["15", "Auvergne-Rhône-Alpes"],
  ["26", "Auvergne-Rhône-Alpes"],
  ["38", "Auvergne-Rhône-Alpes"],
  ["42", "Auvergne-Rhône-Alpes"],
  ["43", "Auvergne-Rhône-Alpes"],
  ["63", "Auvergne-Rhône-Alpes"],
  ["69", "Auvergne-Rhône-Alpes"],
  ["73", "Auvergne-Rhône-Alpes"],
  ["74", "Auvergne-Rhône-Alpes"],
  ["21", "Bourgogne-Franche-Comté"],
  ["25", "Bourgogne-Franche-Comté"],
  ["39", "Bourgogne-Franche-Comté"],
  ["58", "Bourgogne-Franche-Comté"],
  ["70", "Bourgogne-Franche-Comté"],
  ["71", "Bourgogne-Franche-Comté"],
  ["89", "Bourgogne-Franche-Comté"],
  ["90", "Bourgogne-Franche-Comté"],
  ["22", "Bretagne"],
  ["29", "Bretagne"],
  ["35", "Bretagne"],
  ["56", "Bretagne"],
  ["18", "Centre-Val de Loire"],
  ["28", "Centre-Val de Loire"],
  ["36", "Centre-Val de Loire"],
  ["37", "Centre-Val de Loire"],
  ["41", "Centre-Val de Loire"],
  ["45", "Centre-Val de Loire"],
  ["08", "Grand Est"],
  ["10", "Grand Est"],
  ["51", "Grand Est"],
  ["52", "Grand Est"],
  ["54", "Grand Est"],
  ["55", "Grand Est"],
  ["57", "Grand Est"],
  ["67", "Grand Est"],
  ["68", "Grand Est"],
  ["88", "Grand Est"],
  ["02", "Hauts-de-France"],
  ["59", "Hauts-de-France"],
  ["60", "Hauts-de-France"],
  ["62", "Hauts-de-France"],
  ["80", "Hauts-de-France"],
  ["75", "Île-de-France"],
  ["77", "Île-de-France"],
  ["78", "Île-de-France"],
  ["91", "Île-de-France"],
  ["92", "Île-de-France"],
  ["93", "Île-de-France"],
  ["94", "Île-de-France"],
  ["95", "Île-de-France"],
  ["14", "Normandie"],
  ["27", "Normandie"],
  ["50", "Normandie"],
  ["61", "Normandie"],
  ["76", "Normandie"],
  ["16", "Nouvelle-Aquitaine"],
  ["17", "Nouvelle-Aquitaine"],
  ["19", "Nouvelle-Aquitaine"],
  ["23", "Nouvelle-Aquitaine"],
  ["24", "Nouvelle-Aquitaine"],
  ["33", "Nouvelle-Aquitaine"],
  ["40", "Nouvelle-Aquitaine"],
  ["47", "Nouvelle-Aquitaine"],
  ["64", "Nouvelle-Aquitaine"],
  ["79", "Nouvelle-Aquitaine"],
  ["86", "Nouvelle-Aquitaine"],
  ["87", "Nouvelle-Aquitaine"],
  ["09", "Occitanie"],
  ["11", "Occitanie"],
  ["12", "Occitanie"],
  ["30", "Occitanie"],
  ["31", "Occitanie"],
  ["32", "Occitanie"],
  ["34", "Occitanie"],
  ["46", "Occitanie"],
  ["48", "Occitanie"],
  ["65", "Occitanie"],
  ["66", "Occitanie"],
  ["81", "Occitanie"],
  ["82", "Occitanie"],
  ["44", "Pays de la Loire"],
  ["49", "Pays de la Loire"],
  ["53", "Pays de la Loire"],
  ["72", "Pays de la Loire"],
  ["85", "Pays de la Loire"],
  ["04", "Provence-Alpes-Côte d'Azur"],
  ["05", "Provence-Alpes-Côte d'Azur"],
  ["06", "Provence-Alpes-Côte d'Azur"],
  ["13", "Provence-Alpes-Côte d'Azur"],
  ["83", "Provence-Alpes-Côte d'Azur"],
  ["84", "Provence-Alpes-Côte d'Azur"],
  ["2A", "Corse"],
  ["2B", "Corse"],
  ["971", "Guadeloupe"],
  ["972", "Martinique"],
  ["973", "Guyane"],
  ["974", "La Réunion"],
  ["976", "Mayotte"],
]);

function normalizeCode(c: any): string | null {
  if (!c) return null;
  let code = String(c).trim();
  if (code === "2A" || code === "2B") return code;
  if (/^\d{3}$/.test(code) && code.startsWith("97")) return code;
  if (/^\d$/.test(code)) return "0" + code;
  if (/^\d{2}$/.test(code)) return code;
  return null;
}

const festivalsParRegion = d3.rollup(
  festivalsData,
  (v) => v.length,
  (d) => {
    const codeDep =
      normalizeCode(d.code_departement) ||
      normalizeCode(
        String(
          d["Code postal (de la commune principale de déroulement)"] || ""
        ).slice(0, 2)
      );
    return depToRegion.get(codeDep ?? "") || "Autre";
  }
);

const allRegions = new Set([
  ...monumentsParRegion.keys(),
  ...festivalsParRegion.keys(),
]);
const fusion = Array.from(allRegions)
  .map((region) => ({
    region,
    monuments: +(monumentsParRegion.get(region) || 0),
    festivals: +(festivalsParRegion.get(region) || 0),
    total:
      +(monumentsParRegion.get(region) || 0) +
      +(festivalsParRegion.get(region) || 0),
  }))
  .filter((d) => d.region && d.total > 0)
  .sort((a, b) => d3.descending(a.total, b.total));

const maxValue = d3.max(fusion, (d) => Math.max(d.monuments, d.festivals)) || 0;

const fusionJson = JSON.stringify(fusion);
const maxValueJson = JSON.stringify(maxValue);

const uniqueId = `graph-9-${Math.random().toString(36).substr(2, 9)}`;
---

<div class="graph-container" data-graph-id={uniqueId}>
  <div class="plot-holder"></div>
  <div class="tooltip"></div>
</div>

<style>
  .graph-container {
    position: relative;
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 2rem 0;
  }

  .plot-holder {
    width: 100%;
    max-width: 1000px;
  }

  .tooltip {
    position: fixed;
    display: none;
    background: rgba(0, 0, 0, 0.95);
    color: white;
    padding: 10px 14px;
    border-radius: 6px;
    font-size: 15px;
    font-weight: 600;
    font-family:
      system-ui,
      -apple-system,
      sans-serif;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
    pointer-events: none;
    white-space: pre-line;
    line-height: 1.6;
    border: 1px solid rgba(255, 255, 255, 0.2);
    z-index: 1000;
  }

  :global(.graph-container .plot-holder svg) {
    user-select: none;
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
  }

  :global(.graph-container .plot-holder text) {
    pointer-events: none;
  }

  :global(.graph-container .plot-holder rect) {
    cursor: pointer;
    transition: all 0.2s ease;
  }

  :global(.graph-container .plot-holder rect:hover) {
    filter: brightness(1.15);
  }
</style>

<script type="module" define:vars={{ fusionJson, maxValueJson, uniqueId }}>
  async function renderPlot() {
    try {
      const Plot = await import(
        "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm"
      );

      const fusion = JSON.parse(fusionJson);
      const maxValue = JSON.parse(maxValueJson);

      const plot = Plot.plot({
        subtitle: "Monuments historiques ←→ Festivals",
        width: 1000,
        height: 600,
        marginLeft: 220,
        marginRight: 100,
        x: {
          label: "← Monuments historiques | Festivals →",
          domain: [-maxValue * 1.15, maxValue * 1.15],
          tickFormat: Math.abs,
          grid: true,
        },
        y: {
          label: null,
          domain: fusion.map((d) => d.region),
        },
        marks: [
          Plot.ruleX([0], { stroke: "#374151", strokeWidth: 2 }),
          Plot.barX(fusion, {
            x: (d) => -Math.abs(d.monuments),
            y: "region",
            fill: "#dc2626",
            title: (d) =>
              `${d.region}\nMonuments : ${d.monuments.toLocaleString()}`,
          }),
          Plot.barX(fusion, {
            x: (d) => Math.abs(d.festivals),
            y: "region",
            fill: "#2563eb",
            title: (d) =>
              `${d.region}\nFestivals : ${d.festivals.toLocaleString()}`,
          }),
          Plot.text(fusion, {
            x: (d) => -Math.abs(d.monuments),
            y: "region",
            text: (d) => d.monuments.toLocaleString(),
            dx: -8,
            textAnchor: "end",
            fill: "#dc2626",
            fontSize: 11,
            fontWeight: "600",
          }),
          Plot.text(fusion, {
            x: (d) => Math.abs(d.festivals),
            y: "region",
            text: (d) => d.festivals.toLocaleString(),
            dx: 8,
            textAnchor: "start",
            fill: "#2563eb",
            fontSize: 11,
            fontWeight: "600",
          }),
        ],
      });

      const container = document.querySelector(`[data-graph-id="${uniqueId}"]`);
      const plotHolder = container?.querySelector(".plot-holder");
      const tooltip = container?.querySelector(".tooltip");

      if (plotHolder && tooltip) {
        plotHolder.innerHTML = "";
        plotHolder.appendChild(plot);

        const bars = plotHolder.querySelectorAll("rect");

        const barTitles = new Map();
        bars.forEach((bar) => {
          const titleElement = bar.querySelector("title");
          const title = titleElement?.textContent || "";
          barTitles.set(bar, title);

          if (titleElement) {
            titleElement.remove();
          }
          bar.removeAttribute("aria-label");
        });

        bars.forEach((bar) => {
          bar.style.cursor = "pointer";

          bar.addEventListener("mouseenter", (e) => {
            const title = barTitles.get(bar);

            tooltip.textContent = title;
            tooltip.style.display = "block";
            tooltip.style.left = e.clientX + 10 + "px";
            tooltip.style.top = e.clientY + 10 + "px";
          });

          bar.addEventListener("mousemove", (e) => {
            tooltip.style.left = e.clientX + 10 + "px";
            tooltip.style.top = e.clientY + 10 + "px";
          });

          bar.addEventListener("mouseleave", () => {
            tooltip.style.display = "none";
          });
        });
      }
    } catch (error) {
      console.error("Erreur lors du rendu du graphique:", error);
    }
  }

  renderPlot();
</script>
