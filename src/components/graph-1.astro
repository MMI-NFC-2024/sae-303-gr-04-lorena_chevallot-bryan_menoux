---
import * as d3 from "d3";
import fs from "fs";
import path from "path";

const assetsDir = path.join(process.cwd(), "src", "assets");

const csvText = fs.readFileSync(
  path.join(assetsDir, "base_culturelle_nettoyee.csv"),
  "utf8"
);
const baseCulturelleNettoyee = d3.csvParse(csvText);
const geoText = fs.readFileSync(
  path.join(assetsDir, "departements.geojson"),
  "utf8"
);
const departements = JSON.parse(geoText);
let densite = d3
  .rollups(
    baseCulturelleNettoyee,
    (v: any) => v.length,
    (d: any) => d["N_Département"]
  )
  .map(([N_Département, count]: any) => ({ N_Département, count }));
const deptData = departements.features.map((feature: any) => {
  const codeDept = feature.properties.code;
  const nomDept = feature.properties.nom;
  const densiteInfo = densite.find(
    (d: any) => String(d.N_Département) === String(codeDept)
  );
  return {
    code: codeDept,
    nom: nomDept,
    count: densiteInfo ? densiteInfo.count : 0,
  };
});
const deptDataJson = JSON.stringify(deptData);
const departatementsJson = JSON.stringify(departements);
---

<div id="map-container">
  <div id="plot-holder" class="flex justify-center min-h-[600px] items-center">
    <div class="text-zinc-400">Chargement de la carte...</div>
  </div>
  <div id="tooltip" class="tooltip"></div>
</div>
<script type="module" define:vars={{ deptDataJson, departatementsJson }}>
  (async () => {
    const Plot = await import(
      "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm"
    );
    const deptData = JSON.parse(deptDataJson);
    const departements = JSON.parse(departatementsJson);
    const tooltip = document.getElementById("tooltip");
    const plotHolder = document.getElementById("plot-holder");
    try {
      const plot = Plot.plot({
        projection: {
          type: "mercator",
          domain: departements,
        },
        color: {
          type: "threshold",
          domain: [200, 500, 1000, 1250, 1500, 2000, 2500],
          scheme: "YlGnBu",
          label: "Nombre d'équipements culturels (par département)",
          legend: true,
          width: 800,
        },
        marks: [
          Plot.geo(departements, {
            stroke: "#fff",
            strokeWidth: 1,
            fill: (d) => {
              const deptInfo = deptData.find(
                (dept) => dept.code === d.properties.code
              );
              return deptInfo ? deptInfo.count : 0;
            },
            title: (d) => {
              const deptInfo = deptData.find(
                (dept) => dept.code === d.properties.code
              );
              return deptInfo
                ? `${deptInfo.nom}\n${deptInfo.count} lieu${deptInfo.count > 1 ? "x" : ""}`
                : "Données indisponibles";
            },
          }),
        ],
        width: 800,
        height: 600,
        marginBottom: 80,
      });
      plotHolder.innerHTML = "";
      plotHolder.appendChild(plot);
      const paths = plotHolder.querySelectorAll("path");
      paths.forEach((path) => {
        path.style.cursor = "pointer";
        path.style.transition = "all 0.2s ease";
        path.addEventListener("mouseenter", (e) => {
          const title =
            path.getAttribute("aria-label") ||
            path.querySelector("title")?.textContent ||
            "";
          tooltip.textContent = title;
          tooltip.style.display = "block";
          tooltip.style.left = e.pageX + 10 + "px";
          tooltip.style.top = e.pageY + 10 + "px";
          path.style.stroke = "#2563eb";
          path.style.filter = "brightness(1.15) saturate(1.2)";
          path.style.opacity = "0.9";
        });
        path.addEventListener("mousemove", (e) => {
          tooltip.style.left = e.pageX + 10 + "px";
          tooltip.style.top = e.pageY + 10 + "px";
        });
        path.addEventListener("mouseleave", () => {
          tooltip.style.display = "none";
          path.style.stroke = "#fff";
          path.style.filter = "none";
          path.style.opacity = "1";
        });
      });
    } catch (err) {
      console.error("Erreur:", err);
      plotHolder.innerHTML =
        '<div class="text-red-400">Erreur de chargement</div>';
    }
  })();
</script>
<style>
  #map-container {
    position: relative;
    display: inline-block;
    width: 100%;
  }
  .tooltip {
    display: none;
    position: fixed;
    background: rgba(0, 0, 0, 0.95);
    color: white;
    padding: 10px 14px;
    border-radius: 6px;
    font-size: 15px;
    font-weight: 600;
    font-family:
      system-ui,
      -apple-system,
      sans-serif;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
    pointer-events: none;
    white-space: pre-line;
    line-height: 1.6;
    border: 1px solid rgba(255, 255, 255, 0.2);
    z-index: 1000;
  }
</style>
