---
import * as d3 from "d3";
import fs from "fs";
import path from "path";

const assetsDir = path.join(process.cwd(), "src", "assets");

const csvText = fs.readFileSync(
  path.join(assetsDir, "base_culturelle_nettoyee.csv"),
  "utf8"
);
const baseCulturelleNettoyee = d3.csvParse(csvText);

const geoText = fs.readFileSync(
  path.join(assetsDir, "departements.geojson"),
  "utf8"
);
const departements = JSON.parse(geoText);

// Densité par département
let densite = d3
  .rollups(
    baseCulturelleNettoyee,
    (v: any) => v.length,
    (d: any) => d["N_Département"]
  )
  .map(([N_Département, count]: any) => ({ N_Département, count }));

const deptData = departements.features.map((feature: any) => {
  const codeDept = feature.properties.code;
  const nomDept = feature.properties.nom;
  const densiteInfo = densite.find(
    (d: any) => String(d.N_Département) === String(codeDept)
  );
  return {
    code: codeDept,
    nom: nomDept,
    count: densiteInfo ? densiteInfo.count : 0,
  };
});

const deptDataJson = JSON.stringify(deptData);
const departatementsJson = JSON.stringify(departements);

const uniqueId = `graph-1-${Math.random().toString(36).substr(2, 9)}`;
---

<div
  class="graph-container w-full flex flex-col items-center"
  data-graph-id={uniqueId}
>
  <!-- Légende au-dessus -->
  <div class="legend-holder w-full flex flex-col items-center mb-4">
    <div class="text-base-content opacity-50 p-2">
      Chargement de la légende...
    </div>
  </div>

  <!-- Carte -->
  <div class="plot-holder w-full flex flex-col items-center">
    <div class="text-base-content opacity-50 p-4">
      Chargement de la carte...
    </div>
  </div>

  <div class="tooltip"></div>
</div>

<script
  type="module"
  define:vars={{ deptDataJson, departatementsJson, uniqueId }}
>
  (async () => {
    const Plot = await import(
      "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm"
    );

    const deptData = JSON.parse(deptDataJson);
    const departements = JSON.parse(departatementsJson);

    const container = document.querySelector(`[data-graph-id="${uniqueId}"]`);
    const tooltip = container?.querySelector(".tooltip");
    const plotHolder = container?.querySelector(".plot-holder");
    const legendHolder = container?.querySelector(".legend-holder");

    try {
      const containerWidth = plotHolder.clientWidth || 1000;
      const plotWidth = Math.min(containerWidth - 40, 1000);
      const plotHeight = Math.max(plotWidth * 0.8, 600);

      // Échelle de couleurs commune aux deux (carte + légende)
      const colorScale = {
        type: "threshold",
        domain: [200, 500, 1000, 1250, 1500, 2000, 2500],
        scheme: "YlGnBu",
      };

      // Légende indépendante, placée AU-DESSUS
      const legend = Plot.legend({
        color: {
          ...colorScale,
          label: "Nombre d'équipements culturels (par département)",
        },
        width: plotWidth,
      });

      // Nettoyer et insérer la légende
      legendHolder.innerHTML = "";
      legendHolder.appendChild(legend);

      // Graphique sans légende intégrée
      const plot = Plot.plot({
        projection: { type: "mercator", domain: departements },
        color: {
          ...colorScale,
          legend: false, // <-- désactive la légende intégrée (sinon elle part sur le côté)
        },
        marks: [
          Plot.geo(departements, {
            stroke: "#fff",
            strokeWidth: 1,
            fill: (d) => {
              const deptInfo = deptData.find(
                (dept) => dept.code === d.properties.code
              );
              return deptInfo ? deptInfo.count : 0;
            },
            title: (d) => {
              const deptInfo = deptData.find(
                (dept) => dept.code === d.properties.code
              );
              return deptInfo
                ? `${deptInfo.nom}\n${deptInfo.count} lieu${deptInfo.count > 1 ? "x" : ""}`
                : "Données indisponibles";
            },
            ariaLabel: null,
          }),
        ],
        width: plotWidth,
        height: plotHeight,
        marginTop: 20,
        marginBottom: 20,
        marginLeft: 20,
        marginRight: 20,
      });

      // Insérer la carte
      plotHolder.innerHTML = "";
      plotHolder.appendChild(plot);

      // Tooltips enrichis
      const paths = plotHolder.querySelectorAll("path");
      paths.forEach((path) => {
        const title =
          path.getAttribute("aria-label") ||
          path.querySelector("title")?.textContent ||
          "";

        const titleElement = path.querySelector("title");
        if (titleElement) titleElement.remove();
        path.removeAttribute("aria-label");

        path.style.cursor = "pointer";
        path.style.transition = "all 0.2s ease";
        path.addEventListener("mouseenter", (e) => {
          tooltip.textContent = title;
          tooltip.style.display = "block";
          tooltip.style.left = e.clientX + 10 + "px";
          tooltip.style.top = e.clientY + 10 + "px";
          path.style.stroke = "#2563eb";
          path.style.filter = "brightness(1.15) saturate(1.2)";
          path.style.opacity = "0.9";
        });
        path.addEventListener("mousemove", (e) => {
          tooltip.style.left = e.clientX + 10 + "px";
          tooltip.style.top = e.clientY + 10 + "px";
        });
        path.addEventListener("mouseleave", () => {
          tooltip.style.display = "none";
          path.style.stroke = "#fff";
          path.style.filter = "none";
          path.style.opacity = "1";
        });
      });
    } catch (err) {
      console.error("Erreur:", err);
      plotHolder.innerHTML =
        '<div class="text-error">Erreur de chargement</div>';
      if (legendHolder) {
        legendHolder.innerHTML =
          '<div class="text-error">Erreur de légende</div>';
      }
    }
  })();
</script>

<style>
  .graph-container {
    position: relative;
    width: 100%;
    overflow: visible;
    padding: 1rem;
  }
  .legend-holder {
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .plot-holder {
    width: 100%;
    min-height: auto;
    display: flex;
    flex-direction: column;
    align-items: center;
  }
  .plot-holder > * {
    max-width: 100%;
  }
  .tooltip {
    display: none;
    position: fixed;
    background: rgba(0, 0, 0, 0.95);
    color: white;
    padding: 10px 14px;
    border-radius: 6px;
    font-size: 15px;
    font-weight: 600;
    font-family:
      system-ui,
      -apple-system,
      sans-serif;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
    pointer-events: none;
    white-space: pre-line;
    line-height: 1.6;
    border: 1px solid rgba(255, 255, 255, 0.2);
    z-index: 1000;
  }
</style>
