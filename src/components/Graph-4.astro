---
import * as d3 from "d3";
import fs from "fs";
import path from "path";
const assetsDir = path.join(process.cwd(), "src", "assets");
const entreesMuseeText = fs.readFileSync(
  path.join(assetsDir, "ENTREES_ET_CATEGORIES_DE_PUBLIC@2.csv"),
  "utf8"
);
const entreesMusee2021 = d3.csvParse(entreesMuseeText);
const indicePauvreteText = fs.readFileSync(
  path.join(assetsDir, "indice-pauvrete-21@1.csv"),
  "utf8"
);
const indicePauvrete2021 = d3.csvParse(indicePauvreteText);
const populationText = fs.readFileSync(
  path.join(assetsDir, "detail_population@2.json"),
  "utf8"
);
const population = JSON.parse(populationText);
const normalize = (s: any) =>
  s
    ?.toString()
    .trim()
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/'/g, "'")
    .replace(/\s+/g, " ");

const normalizeCode = (code: any) =>
  String(code).trim().replace(".0", "").padStart(2, "0");
const populationTotale = population.filter(
  (d: any) =>
    d["Niveau Géo"] === "Département" &&
    d["Âge"]?.trim() === "Total" &&
    d["Sexe"]?.trim() === "Total" &&
    d["Mesure du recensement "] === "Population" &&
    d["Période"] === 2010
);
const popParDep = d3
  .rollups(
    populationTotale,
    (v: any) => d3.sum(v, (d: any) => +d["Valeur"]),
    (d: any) => normalize(d["Géographie"])
  )
  .map(([departement, population]: any) => ({ departement, population }));
const museeParDep = d3
  .rollups(
    entreesMusee2021,
    (v: any) => d3.sum(v, (d: any) => +(d as any).total || 0),
    (d: any) => normalize((d as any).departement)
  )
  .map(([departement, total_musees]: any) => ({ departement, total_musees }));
const pauvreteParDep = indicePauvrete2021.map((d: any) => ({
  departement: normalize(d.departement),
  taux_pauvrete: +d.taux_pauvrete,
}));
const merged = museeParDep
  .map((m: any) => {
    const p = pauvreteParDep.find((x: any) => x.departement === m.departement);
    const pop = popParDep.find((x: any) => x.departement === m.departement);
    return {
      departement: m.departement,
      total_musees: m.total_musees,
      population: pop ? pop.population : null,
      taux_pauvrete: p ? p.taux_pauvrete : null,
    };
  })
  .filter((d: any) => d.population && d.taux_pauvrete && d.total_musees > 0);
const data = merged.map((d: any) => ({
  departement: d.departement,
  taux_pauvrete: d.taux_pauvrete,
  entrees_par_habitant: (d.total_musees / d.population) * 10000,
}));
const dataJson = JSON.stringify(data);
---

<div id="scatter-chart-container">
  <div
    id="plot-holder-4"
    class="flex justify-center min-h-[550px] items-center"
  >
    <div class="text-zinc-400">Chargement du graphique...</div>
  </div>
</div>
<script type="module" define:vars={{ dataJson }}>
  (async () => {
    const Plot = await import(
      "https://cdn.jsdelivr.net/npm/@observablehq/plot@0.6/+esm"
    );
    const data = JSON.parse(dataJson);
    const plotHolder = document.getElementById("plot-holder-4");
    try {
      const plot = Plot.plot({
        x: { label: "Taux de pauvreté (%)", grid: true },
        y: {
          label: "Entrées aux musées pour 10 000 habitants",
          grid: true,
        },
        marks: [
          Plot.dot(data, {
            x: "taux_pauvrete",
            y: "entrees_par_habitant",
            fill: "#0868ac",
            r: 5,
            title: (d) =>
              `${d.departement}\n${d.taux_pauvrete}% de pauvreté\n${d.entrees_par_habitant.toFixed(
                1
              )} entrées / 10 000 hab.`,
          }),
          Plot.linearRegressionY(data, {
            x: "taux_pauvrete",
            y: "entrees_par_habitant",
            stroke: "red",
            strokeWidth: 2,
          }),
        ],
        width: 800,
        height: 550,
        marginLeft: 80,
      });
      plotHolder.innerHTML = "";
      plotHolder.appendChild(plot);
    } catch (err) {
      console.error("Erreur:", err);
      plotHolder.innerHTML =
        '<div class="text-red-400">Erreur de chargement du graphique</div>';
    }
  })();
</script>
<style>
  #scatter-chart-container {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 1rem;
  }
</style>
